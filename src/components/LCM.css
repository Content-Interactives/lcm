/* LCM Explorer Styles - Clean Rebuild */

/* Step 1 */
@keyframes moveStep1NumbersUp {
	0% {
		transform: translateY(0);
	}
	100% {
		transform: translateY(-150%);
	}
}

.move-step1-numbers-up {
	animation: moveStep1NumbersUp 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

@keyframes fadeInUpCenteredAnimation {
    from {
        opacity: 0;
        transform: translateY(10px) translateX(-50%);
    }
    to {
        opacity: 1;
        transform: translateY(0) translateX(-50%);
    }
}

.fade-in-up-centered-animation {
    animation: fadeInUpCenteredAnimation 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

@keyframes fadeOutDownCenteredAnimation {
    from {
        opacity: 1;
        transform: translateY(0) translateX(-50%);
    }
    to {
        opacity: 0;
        transform: translateY(10px) translateX(-50%);
    }
}

.fade-out-down-centered-animation {
    animation: fadeOutDownCenteredAnimation 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

/* Factor Tree Styles */
.factor-tree-container {
    position: relative;
    min-height: 300px;
    display: flex;
    justify-content: center;
    align-items: flex-start;
}

.tree-node {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    transition: all 0.3s ease;
}

.tree-node.root {
    font-size: 2.25rem;
    color: black;
}

.tree-node.prime {
    font-size: 1.5rem;
    color: #5750E3;
}

.tree-node.non-prime {
    font-size: 1.5rem;
    color: #5750E3;
}

.tree-line {
    position: absolute;
    width: 2px;
    background: #5750E3;
    transform-origin: top;
}

.tree-line.left {
    transform: rotate(-30deg);
}

.tree-line.right {
    transform: rotate(30deg);
}

/* Static Factor Tree Lines */
.factor-tree-line {
    position: absolute;
    width: 2px;
    background: #5750E3;
    transform-origin: top;
}

.factor-tree-line.left {
    transform: rotate(-30deg);
}

.factor-tree-line.right {
    transform: rotate(30deg);
}

.factor-tree-line.vertical {
    transform: rotate(0deg);
}

/* Static Factor Tree Nodes */
.factor-tree-node {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1.5rem;
    color: #5750E3;
    width: 40px;
    height: 40px;
    transition: all 0.3s ease;
}

.factor-tree-node.root {
    font-size: 2.25rem;
    color: black;
}

.factor-tree-node.prime {
    font-size: 1.5rem;
    color: #5750E3;
}

.factor-tree-node.non-prime {
    font-size: 1.5rem;
    color: #5750E3;
}

/* Static Factor Tree Animation Classes */
.static-line-appear {
    animation: staticLineAppear 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

.static-line-appear.left {
    animation: staticLineAppearLeft 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

.static-line-appear.right {
    animation: staticLineAppearRight 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

.static-prime-appear {
    animation: staticPrimeAppear 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

.static-line-remove {
    animation: staticLineRemove 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

.static-line-remove.left {
    animation: staticLineRemoveLeft 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

.static-line-remove.right {
    animation: staticLineRemoveRight 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

.static-prime-remove {
    animation: staticPrimeRemove 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

@keyframes staticLineAppear {
    from {
        opacity: 0;
        transform: scale(0.8);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

@keyframes staticLineAppearLeft {
    from {
        opacity: 0;
        transform: rotate(-30deg) scale(0.8);
    }
    to {
        opacity: 1;
        transform: rotate(-30deg) scale(1);
    }
}

@keyframes staticLineAppearRight {
    from {
        opacity: 0;
        transform: rotate(30deg) scale(0.8);
    }
    to {
        opacity: 1;
        transform: rotate(30deg) scale(1);
    }
}

@keyframes staticPrimeAppear {
    from {
        opacity: 0;
        transform: scale(0.5);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

@keyframes staticLineRemove {
    from {
        opacity: 1;
        transform: scale(1);
    }
    to {
        opacity: 0;
        transform: scale(0.8);
    }
}

@keyframes staticLineRemoveLeft {
    from {
        opacity: 1;
        transform: rotate(-30deg) scale(1);
    }
    to {
        opacity: 0;
        transform: rotate(-30deg) scale(0.8);
    }
}

@keyframes staticLineRemoveRight {
    from {
        opacity: 1;
        transform: rotate(30deg) scale(1);
    }
    to {
        opacity: 0;
        transform: rotate(30deg) scale(0.8);
    }
}

@keyframes staticPrimeRemove {
    from {
        opacity: 1;
        transform: scale(1);
    }
    to {
        opacity: 0;
        transform: scale(0.3);
    }
}

/* Shrink-out animation for non-prime nodes */
@keyframes nonPrimeShrinkOut {
    from {
        opacity: 1;
        transform: scale(1);
    }
    to {
        opacity: 0;
        transform: scale(0);
    }
}

.non-prime-shrink-out {
    animation: nonPrimeShrinkOut 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
    transition: none !important;
}

/* Custom opacity override for non-prime nodes */
.factor-tree-node.non-prime.opacity-50 {
    opacity: 0.5 !important;
}

/* Animation for moving first layer 2's left and down */
@keyframes moveFirstLayerTwos {
    0% {
        transform: translateX(0) translateY(0);
    }
    100% {
        transform: translateX(-80%) translateY(-50%);
    }
}

.move-first-layer-twos {
    animation: moveFirstLayerTwos 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

/* Animation for moving second layer primes up */
@keyframes moveSecondLayerPrimesUp {
    0% {
        transform: translateY(0);
    }
    100% {
        transform: translateY(-228%);
    }
}

.move-second-layer-primes-up {
    animation: moveSecondLayerPrimesUp 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

@keyframes removeStep3FirstRow {
    0% {
        transform: translateY(-228%);
        opacity: 1;
    }
    100% {
        transform: translateY(-228%);
        opacity: 0;
    }
}

.remove-step3-first-row {
    animation: removeStep3FirstRow 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

@keyframes removeStep3FirstRow2 {
    0% {
        transform: translateX(-80%) translateY(-50%);
        opacity: 1;
    }
    100% {
        transform: translateX(-80%) translateY(-50%);
        opacity: 0;
    }
}

.remove-step3-first-row-2 {
    animation: removeStep3FirstRow2 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

/* Multiplication Symbol Styles */
.multiplication-symbol {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1.5rem;
    color: #5750E3;
    width: 40px;
    height: 40px;
    transition: all 0.3s ease;
}

/* Multiplication Symbol Animation */
@keyframes multiplicationSymbolAppear {
    0% {
        opacity: 0;
        transform: scale(0.5);
    }
    100% {
        opacity: 1;
        transform: scale(1);
    }
}

.multiplication-symbol-appear {
    animation: multiplicationSymbolAppear 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

/* Converging Lines Styles */
.converging-line {
    position: absolute;
    width: 2px;
    background: #5750E3;
    transform-origin: top;
}

.converging-line.left {
    transform: rotate(-15deg);
}

.converging-line.right {
    transform: rotate(15deg);
}

/* Converging Lines Animation */
@keyframes convergingLineAppear {
    0% {
        opacity: 0;
        transform: scaleY(0);
    }
    100% {
        opacity: 1;
        transform: scaleY(1);
    }
}

@keyframes convergingLineAppearLeft {
    0% {
        opacity: 0;
        transform: rotate(-30deg) scaleY(0);
    }
    100% {
        opacity: 1;
        transform: rotate(-30deg) scaleY(1);
    }
}

@keyframes convergingLineAppearRight {
    0% {
        opacity: 0;
        transform: rotate(30deg) scaleY(0);
    }
    100% {
        opacity: 1;
        transform: rotate(30deg) scaleY(1);
    }
}

@keyframes convergingLineRemoveLeft {
    from {
        opacity: 1;
        transform: rotate(-30deg) scaleY(1);
    }
    to {
        opacity: 0;
        transform: rotate(-30deg) scaleY(0);
    }
}

@keyframes convergingLineRemoveRight {
    from {
        opacity: 1;
        transform: rotate(30deg) scaleY(1);
    }
    to {
        opacity: 0;
        transform: rotate(30deg) scaleY(0);
    }
}

.converging-line-appear {
    animation: convergingLineAppear 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

.converging-line-appear.left {
    animation: convergingLineAppearLeft 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

.converging-line-appear.right {
    animation: convergingLineAppearRight 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

.converging-line-remove.left {
    animation: convergingLineRemoveLeft 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

.converging-line-remove.right {
    animation: convergingLineRemoveRight 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

/* Superscript Expression Styles */
.superscript-expression {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1.5rem;
    color: #5750E3;
    width: 40px;
    height: 40px;
    transition: all 0.3s ease;
}

/* Superscript Expression Animation */
@keyframes superscriptExpressionAppear {
    0% {
        opacity: 0;
        transform: scale(0.5);
    }
    100% {
        opacity: 1;
        transform: scale(1);
    }
}

.superscript-expression-appear {
    animation: superscriptExpressionAppear 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

/* Between Multiplication Symbol Styles */
.between-multiplication-symbol {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1.5rem;
    color: #5750E3;
    width: 40px;
    height: 40px;
    transition: all 0.3s ease;
}

/* Between Multiplication Symbol Animation */
@keyframes betweenMultiplicationSymbolAppear {
    0% {
        opacity: 0;
        transform: scale(0.5);
    }
    100% {
        opacity: 1;
        transform: scale(1);
    }
}

.between-multiplication-symbol-appear {
    animation: betweenMultiplicationSymbolAppear 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

@keyframes remove6and9 {
    from {
        opacity: 0.5;
    }
    to {
        opacity: 0;
    }
}

.remove-6-and-9 {
    animation: remove6and9 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

/* Superscript Expression Move Up */
@keyframes power2MoveUp {
    0% {
        transform: translate(0);
    }
    100% {
        transform: translate(350%, -15%);
    }
}

@keyframes power3MoveUp {
    0% {
        transform: translate(0);
    }
    100% {
        transform: translate(-100%, -15%);
    }
}

.power-2-move-up {
    animation: power2MoveUp 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

.power-3-move-up {
    animation: power3MoveUp 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

@keyframes removePower2 {
    0% {
        opacity: 1;
        transform: translate(350%, -15%);
    }
    100% {
        opacity: 0;
        transform: translate(350%, -15%);
    }
}

.remove-power-2 {  
    animation: removePower2 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

@keyframes removePower3 {
    0% {
        opacity: 1;
        transform: translate(-100%, -15%);
    }
    100% {
        opacity: 0;
        transform: translate(-100%, -15%);
    }
}

.remove-power-3 {
    animation: removePower3 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

.move-lcm-text-right {
    animation: moveLcmTextRight 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

@keyframes moveLcmTextRight {
    0% {
        transform: translateX(0);
    }
    100% {
        transform: translateX(24%);
    }
}

/* Step 4 animations */
.move-lcm-text-down {
    animation: moveLcmTextDown 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

.move-36-text-down {
    animation: move36TextDown 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

@keyframes moveLcmTextDown {
    0% {
        transform: translate(24%, 0%);
    }
    100% {
        transform: translate(24%, 300%);
    }
}

@keyframes move36TextDown {
    0% {
        transform: translate(0%, 0%);
    }
    100% {
        transform: translate(0%, 300%);
    }
}

/* Input Section Styles */
.input-section {
    height: 100%;
    text-align: center;
    background: transparent;
    border: 2px solid #9ca3af;
    border-radius: 4px;
    font-size: 2.25rem;
    font-weight: bold;
    color: #000000;
}

.shrink-out-12-and-18 {
    animation: shrinkOut12And18 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

@keyframes shrinkOut12And18 {
    0% {
        opacity: 1;
        transform: translateY(-150%) scale(1);
    }
    100% {
        opacity: 0;
        transform: translateY(-150%) scale(0);
    }
}

/* Dynamic Factor Tree Specific Styles */
@keyframes dynamicNodeAppear {
    from {
        opacity: 0;
        transform: translateX(-50%) scale(0.5);
    }
    to {
        opacity: 1;
        transform: translateX(-50%) scale(1);
    }
}

.dynamic-node-animate {
    animation: dynamicNodeAppear 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

@keyframes dynamicNodeAppearNonPrime {
    from {
        opacity: 0;
        transform: translateX(-50%) scale(0.5);
    }
    to {
        opacity: 0.7;
        transform: translateX(-50%) scale(1);
    }
}

.dynamic-node-animate-non-prime {
    animation: dynamicNodeAppearNonPrime 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

@keyframes dynamicLineAppear {
    from {
        opacity: 0;
        transform: scale(0.8);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

.dynamic-line-appear {
    animation: dynamicLineAppear 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

@keyframes dynamicLineAppearLeft {
    from {
        opacity: 0;
        transform: rotate(-30deg) scale(0.8);
    }
    to {
        opacity: 1;
        transform: rotate(-30deg) scale(1);
    }
}

.dynamic-line-appear.left {
    animation: dynamicLineAppearLeft 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

@keyframes dynamicLineAppearRight {
    from {
        opacity: 0;
        transform: rotate(30deg) scale(0.8);
    }
    to {
        opacity: 1;
        transform: rotate(30deg) scale(1);
    }
}

.dynamic-line-appear.right {
    animation: dynamicLineAppearRight 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

/* Dynamic tree non-prime nodes with 50% opacity */
.dynamic-factor-tree-node.non-prime {
    opacity: 0.7;
}

/* Shrinking Animation */
@keyframes shrinkOut {
    0% {
        opacity: 1;
        transform: translateX(-50%) scale(1);
    }
    100% {
        opacity: 0;
        transform: translateX(-50%) scale(0);
    }
}

.shrink-out {
    animation: shrinkOut 0.8s ease forwards;
    animation-delay: 0s !important;
    animation-fill-mode: forwards;
}

/* Shrinking Animation for Non-Prime Elements */
@keyframes shrinkOutNonPrime {
    0% {
        opacity: 0.7;
        transform: translateX(-50%) scale(1);
    }
    100% {
        opacity: 0;
        transform: translateX(-50%) scale(0);
    }
}

.shrink-out-non-prime {
    animation: shrinkOutNonPrime 0.8s ease forwards;
    animation-delay: 0s !important;
    animation-fill-mode: forwards;
}

/* Shrinking Animation for Dynamic Factor Tree Lines */
@keyframes shrinkOutLine {
    0% {
        opacity: 1;
        transform: scaleY(1);
    }
    100% {
        opacity: 0;
        transform: scaleY(0);
    }
}

@keyframes shrinkOutLineLeft {
    0% {
        opacity: 1;
        transform: rotate(-30deg) scaleY(1);
    }
    100% {
        opacity: 0;
        transform: rotate(-30deg) scaleY(0);
    }
}

@keyframes shrinkOutLineRight {
    0% {
        opacity: 1;
        transform: rotate(30deg) scaleY(1);
    }
    100% {
        opacity: 0;
        transform: rotate(30deg) scaleY(0);
    }
}

.shrink-out-line {
    animation: shrinkOutLine 0.5s ease forwards;
    animation-delay: 0s !important;
    animation-fill-mode: forwards;
}

.shrink-out-line.left {
    animation: shrinkOutLineLeft 0.5s ease forwards;
    animation-delay: 0s !important;
    animation-fill-mode: forwards;
}

.shrink-out-line.right {
    animation: shrinkOutLineRight 0.5s ease forwards;
    animation-delay: 0s !important;
    animation-fill-mode: forwards;
}